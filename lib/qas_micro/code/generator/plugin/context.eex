defmodule <%= context_module_name %> do
  @behaviour Plug
  import Plug.Conn

  def init(opts), do: opts

  def call(conn, _) do
    context = build_context(conn)
    Absinthe.Plug.put_options(
      conn,
      context: <%= global_module_name %>.context(conn, context)
    )
  end

  defp fetch_client_ip(conn) do
    conn.req_headers
    |> Enum.find({"x-forwarded-for", "127.0.0.1"}, fn t -> elem(t, 0) == "x-forwarded-for" end)
    |> elem(1)
  end

  defp build_context(conn) do
    with ["Bearer " <> token] <- get_req_header(conn, "authorization"),
         {:ok, user, _claims} <- <%= guardian_module_name %>.resource_from_token(token),
         false <- is_nil(user) do
      %{
        current_user: user,
        token: token,
        role: user |> Map.get(:role, "normal") |> String.to_atom(),
        client_ip: fetch_client_ip(conn),
        __qas_app__: :<%= app_name %>,
        app_name: :<%= app_name %>,
        global_module: <%= global_module_name %>,
        callback_module: <%= callback_module_name %>
      }
    else
      _ ->
        %{
          current_user: nil,
          token: nil,
          role: :visitor,
          client_ip: fetch_client_ip(conn),
          __qas_app__: :<%= app_name %>,
          app_name: :<%= app_name %>,
          global_module: <%= global_module_name %>,
          callback_module: <%= callback_module_name %>
        }
    end
  end
end
